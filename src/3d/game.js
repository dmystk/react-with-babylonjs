
import { Engine, Scene, ArcRotateCamera, HemisphericLight, MeshBuilder, Vector3 } from '@babylonjs/core'

let instance = null;

export const GameFactory = {
  getInstance: () => {
    if (instance === null) {
      instance = new Game();
    }
    return instance;
  }
};

export const CameraType = {
  CAMERA_LOOKING_DOWN: 'camera_looking_down',
  CAMERA_LOOKING_UP: 'camera_looking_up',
};

class Game {
  constructor() {
    const canvas = document.createElement('canvas');

    this.engine = new Engine(canvas);

    this.scene = new Scene(this.engine);

    // setup cameras
    this.cameraLookingDown = new ArcRotateCamera("camera1", 0, Math.PI/4, 8, new Vector3.Zero(), this.scene);
    this.cameraLookingUp = new ArcRotateCamera("camera2", 0, Math.PI*3/4, 8, new Vector3.Zero(), this.scene);

    // setup scene
    this.box = MeshBuilder.CreateBox("Box", {size: 1}, this.scene);

    const sphere = MeshBuilder.CreateSphere("sphere", {diameter: 1}, this.scene); 
    sphere.position = new Vector3(0, 2, 0);

    const light = new HemisphericLight("light", new Vector3(0, 1, 0), this.scene);
    light.intensity = 0.7;

    this.arc = 0;
    this.engine.runRenderLoop(() => {
      this.arc += 0.01;
      this.box.position.y = Math.cos(this.arc);
      this.scene.render();
    });
  }

  registerView(canvas, cameraId) {
    const getCameraById = (cameraId) => {
      switch (cameraId) {
        case CameraType.CAMERA_LOOKING_DOWN:
          return this.cameraLookingDown;
        case CameraType.CAMERA_LOOKING_UP:
          return this.cameraLookingUp;
        default:
          // set nothing if the invalid value is passed
          return null;
      }
    };
    // clear views to erase useless views generated by switching tab
    this.engine.views = [];
    this.engine.registerView(canvas, getCameraById(cameraId));
  }

  setBoxSize(size) {
    this.box.scaling = new Vector3(size, size, size);
  }
}
